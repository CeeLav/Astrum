@startuml ECC

package "ECC核心架构" {
    class Entity{
        +UniqueId: long              ' 实体的全局唯一标识符
        +Name: string                ' 实体名称，便于调试和识别
        +IsActive: bool              ' 实体是否激活，控制逻辑执行
        +IsDestroyed: bool           ' 实体是否已销毁，用于生命周期管理
        +CreationTime: DateTime      ' 实体创建时间
        +ComponentMask: long         ' 组件掩码，用于快速查询和筛选
        +Components: List<BaseComponent>   ' 挂载的组件列表
        +ParentId: long              ' 父实体ID，-1表示无父实体
        +ChildrenIds: List<long>     ' 子实体ID列表
        
        +AddComponent<T>(component: T): void     ' 添加组件
        +RemoveComponent<T>(): void              ' 移除组件
        +GetComponent<T>(): T                    ' 获取组件
        +HasComponent<T>(): bool                 ' 检查是否有指定组件
        +ApplyInput(input: LSInput): void        ' 应用输入到实体
        +SetActive(active: bool): void           ' 设置激活状态
        +Destroy(): void                         ' 销毁实体
        +GetChildren(): List<Entity>             ' 获取所有子实体
        +SetParent(parent: Entity): void         ' 设置父实体
    }

    abstract class BaseComponent{
        +ComponentId: int            ' 组件的唯一标识符  
        +EntityId: long              ' 所属实体的ID
    }

    abstract class Capability {
        +CapabilityId: int           ' 能力的唯一标识符
        +OwnerEntity: Entity         ' 拥有此能力的实体
        +IsActive: bool              ' 能力是否激活
        +Priority: int               ' 执行优先级
        
        +Initialize(): void          ' 初始化能力
        +Tick(deltaTime: float): void ' 每帧更新（抽象方法）
        +CanExecute(): bool          ' 检查是否可以执行
        +OnActivate(): void          ' 激活时调用
        +OnDeactivate(): void        ' 停用时调用
    }
    
    ' ECC核心关系
    Entity ||--o{ BaseComponent : "拥有"
    Entity ||--o{ Capability : "具备"
    Entity ||--o{ Entity : "父子关系"
    
    ' 具体的组件数据结构示例
    class PositionComponent extends BaseComponent {
        +X: float                    ' X坐标
        +Y: float                    ' Y坐标
        +Z: float                    ' Z坐标
    }

    class VelocityComponent extends BaseComponent {
        +VX: float                   ' X方向速度
        +VY: float                   ' Y方向速度
        +VZ: float                   ' Z方向速度
    }

    class HealthComponent extends BaseComponent {
        +CurrentHealth: int          ' 当前生命值
        +MaxHealth: int              ' 最大生命值
    }

    class MovementComponent extends BaseComponent {
        +MaxSpeed: float             ' 最大移动速度
        +Acceleration: float         ' 加速度
        +CurrentSpeed: float         ' 当前速度
    }

    class LSInputComponent extends BaseComponent {
        +PlayerId: int               ' 玩家ID
        +CurrentInput: LSInput       ' 当前帧输入
        +PreviousInput: LSInput      ' 上一帧输入
        +InputHistory: List<LSInput> ' 输入历史
        
        +SetInput(input: LSInput): void              ' 设置输入
        +GetInputDelta(): LSInput    ' 获取输入变化
    }

    ' 具体的Capability实现示例
    class MovementCapability extends Capability {
        +Tick(deltaTime: float): void ' 读取InputComponent和MovementComponent，处理移动逻辑
    }
}

package "Unit单位系统" {
    ' Unit类，继承自Entity
    class Unit extends Entity {
        
        +GetPosition(): Vector3                     ' 获取当前位置
        +SetPosition(position: Vector3): void       ' 设置位置
    }
    
    ' Unit的典型组合示例
    note right of Unit : "典型的Unit都包含:\n- PositionComponent (位置)\n- MovementComponent (移动属性)\n- MovementCapability (移动能力)\n这三者组合实现基础的移动功能"
}

package "工厂系统" {
    class EntityFactory {
    +World: World                ' 所属世界
    +NextEntityId: long          ' 实体ID计数器
    
    +CreateEntity(name: string): Entity      ' 创建基础实体
    +DestroyEntity(entity: Entity): void     ' 销毁实体
}

class ComponentFactory {
    +CreateComponent<T>(): T                 ' 创建指定类型的组件
    +CreateComponentFromType(type: Type): BaseComponent  ' 根据类型创建组件
}
}

' 工厂关系
EntityFactory ||--|| ComponentFactory : "使用"
EntityFactory ..> Entity : "创建"
ComponentFactory ..> BaseComponent : "创建"

@enduml
