using System;
using System.IO;
using Xunit;
using Astrum.LogicCore.Managers;
using Astrum.LogicCore.SkillSystem;
using AstrumTest.Common;

namespace AstrumTest
{
    /// <summary>
    /// 技能系统单元测试
    /// 测试 SkillConfigManager 和技能数据结构
    /// 使用 ConfigFixture 提供隔离的配置环境
    /// </summary>
    [Collection("Config Collection")]  // 使用配置集合，确保测试隔离
    [Trait("Category", "Unit")]        // 标记为单元测试
    [Trait("Module", "Skill")]         // 标记为技能模块
    public class SkillSystemTests
    {
        private readonly ConfigFixture _fixture;
        
        public SkillSystemTests(ConfigFixture fixture)
        {
            // 使用 Fixture 提供的配置路径
            _fixture = fixture;
        }
        
        // ========== 基础查询测试 ==========
        
        [Fact]
        public void GetSkillInfo_Level1_ShouldReturnSkillInfo()
        {
            // Arrange
            int skillId = 2001;  // Rush Slash
            int level = 1;
            
            // Act
            var skillInfo = SkillConfigManager.Instance.GetSkillInfo(skillId, level);
            
            // Assert
            Assert.NotNull(skillInfo);
            Assert.Equal(2001, skillInfo.SkillId);
            Assert.Equal(1, skillInfo.CurrentLevel);
            Assert.Equal("Rush Slash", skillInfo.Name);
            Assert.Equal(3, skillInfo.SkillType);  // 位移类型
            Assert.NotEmpty(skillInfo.SkillActions);
            Assert.Equal(2, skillInfo.SkillActions.Count);  // 包含两个动作
            Assert.Contains(skillInfo.SkillActions, a => a.Id == 3001);
            Assert.Contains(skillInfo.SkillActions, a => a.Id == 3002);
        }
        
        [Fact]
        public void GetSkillInfo_NonExistingSkillId_ShouldReturnNull()
        {
            // Act
            var skillInfo = SkillConfigManager.Instance.GetSkillInfo(99999, 1);
            
            // Assert
            Assert.Null(skillInfo);
        }
        
        // ========== 技能动作测试 ==========
        
        [Fact]
        public void SkillInfo_SkillActions_ShouldContainActionData()
        {
            // Arrange
            int skillId = 2001;
            int level = 1;
            
            // Act
            var skillInfo = SkillConfigManager.Instance.GetSkillInfo(skillId, level);
            
            // Assert
            Assert.NotNull(skillInfo);
            Assert.NotEmpty(skillInfo.SkillActions);
            
            var firstAction = skillInfo.SkillActions[0];
            Assert.Equal(3001, firstAction.Id);
            Assert.Equal(2001, firstAction.SkillId);
            Assert.NotEmpty(firstAction.AttackBoxInfo);
            Assert.NotEmpty(firstAction.TriggerFrames);
        }
        
        [Fact]
        public void SkillInfo_RushSlash_ShouldContainTwoActions()
        {
            // Arrange
            int skillId = 2001;
            int level = 1;
            
            // Act
            var skillInfo = SkillConfigManager.Instance.GetSkillInfo(skillId, level);
            
            // Assert
            Assert.NotNull(skillInfo);
            Assert.Equal(2, skillInfo.SkillActions.Count);  // Rush Slash 包含两个动作
            Assert.All(skillInfo.SkillActions, a => Assert.Equal(2001, a.SkillId));
        }
        
        // ========== BaseEffectId + Level 映射测试 ==========
        
        [Fact]
        public void GetEffectValue_ExactMatch_ShouldReturnCorrectValue()
        {
            // Arrange
            int baseEffectId = 4001;  // 假设这是基础效果ID
            int level = 0;  // Level 0 = 4001（当前表中的实际ID）
            
            // Act
            var result = SkillConfigManager.Instance.GetEffectValue(baseEffectId, level);
            
            // Assert
            Assert.NotNull(result);
            Assert.Equal(4001, result.EffectId);
            Assert.Equal(150.0f, result.Value);
            Assert.False(result.IsInterpolated);
            Assert.NotNull(result.EffectData);
        }
        
        [Fact]
        public void GetEffectValue_NoMatch_ShouldReturnZero()
        {
            // Arrange
            int baseEffectId = 10000;
            int level = 5;  // 10005 不存在
            
            // Act
            var result = SkillConfigManager.Instance.GetEffectValue(baseEffectId, level);
            
            // Assert
            Assert.Equal(0f, result.Value);
        }
        
        // ========== 触发帧解析测试 ==========
        
        [Fact]
        public void ParseTriggerFrames_ValidString_ShouldReturnParsedList()
        {
            // Arrange
            string triggerFrames = "Frame5:Collision:4001,Frame8:Direct:4002";
            int skillLevel = 0;  // Level 0，效果ID不变
            
            // Act
            var triggers = SkillConfigManager.Instance.ParseTriggerFrames(triggerFrames, skillLevel);
            
            // Assert
            Assert.NotEmpty(triggers);
            Assert.Equal(2, triggers.Count);
            
            var trigger1 = triggers[0];
            Assert.Equal(5, trigger1.Frame);
            Assert.Equal("Collision", trigger1.TriggerType);
            Assert.Equal(4001, trigger1.EffectId);
            Assert.Equal(150.0f, trigger1.EffectValue);
            
            var trigger2 = triggers[1];
            Assert.Equal(8, trigger2.Frame);
            Assert.Equal("Direct", trigger2.TriggerType);
            Assert.Equal(4002, trigger2.EffectId);
            Assert.Equal(3.0f, trigger2.EffectValue);  // 根据表中的数据
        }
        
        [Fact]
        public void ParseTriggerFrames_EmptyString_ShouldReturnEmptyList()
        {
            // Act
            var triggers = SkillConfigManager.Instance.ParseTriggerFrames("", 1);
            
            // Assert
            Assert.Empty(triggers);
        }
        
        // ========== 完整技能数据测试 ==========
        
        [Fact]
        public void GetSkillInfo_Level1_ShouldBuildCompleteSkillInfo()
        {
            // Arrange
            int skillId = 2001;
            int level = 1;
            
            // Act
            var skillInfo = SkillConfigManager.Instance.GetSkillInfo(skillId, level);
            
            // Assert
            Assert.NotNull(skillInfo);
            Assert.Equal(2001, skillInfo.SkillId);
            Assert.Equal(1, skillInfo.CurrentLevel);
            Assert.Equal("Rush Slash", skillInfo.Name);
            Assert.NotEmpty(skillInfo.SkillActions);
            Assert.Equal(2, skillInfo.SkillActions.Count);
            
            // 验证第一个动作包含解析后的触发帧
            var firstAction = skillInfo.SkillActions[0];
            Assert.NotNull(firstAction);
            Assert.NotEmpty(firstAction.TriggerEffects);
        }
        
        [Fact]
        public void GetSkillInfo_SameSkillSameLevel_ShouldReturnCachedInstance()
        {
            // Arrange
            int skillId = 2001;
            int level = 1;
            
            // Act
            var skillInfo1 = SkillConfigManager.Instance.GetSkillInfo(skillId, level);
            var skillInfo2 = SkillConfigManager.Instance.GetSkillInfo(skillId, level);
            
            // Assert
            Assert.Same(skillInfo1, skillInfo2);  // 应该是同一个实例（缓存）
        }
        
        [Fact]
        public void GetSkillInfo_DifferentLevels_ShouldReturnDifferentInstances()
        {
            // Arrange
            int skillId = 2001;
            
            // Act
            var skillInfoL1 = SkillConfigManager.Instance.GetSkillInfo(skillId, level: 1);
            var skillInfoL5 = SkillConfigManager.Instance.GetSkillInfo(skillId, level: 5);
            
            // Assert
            Assert.NotNull(skillInfoL1);
            Assert.NotNull(skillInfoL5);
            Assert.NotSame(skillInfoL1, skillInfoL5);  // 不同等级，不同实例
            Assert.Equal(1, skillInfoL1.CurrentLevel);
            Assert.Equal(5, skillInfoL5.CurrentLevel);
        }
        
        // ========== 技能效果数据测试 ==========
        
        [Fact]
        public void GetSkillEffect_ExistingEffectId_ShouldReturnEffectData()
        {
            // Arrange
            int effectId = 4001;
            
            // Act
            var effect = SkillConfigManager.Instance.GetSkillEffect(effectId);
            
            // Assert
            Assert.NotNull(effect);
            Assert.Equal(4001, effect.SkillEffectId);
            Assert.Equal(1, effect.EffectType);  // 伤害类型
            Assert.Equal(150.0f, effect.EffectValue);
        }
        
        // ========== 集成测试 ==========
        
        [Fact]
        public void SkillInfo_AllActions_ShouldHaveParsedTriggerEffects()
        {
            // Arrange
            int skillId = 2003;  // Multi Shot（包含多个动作）
            int level = 1;
            
            // Act
            var skillInfo = SkillConfigManager.Instance.GetSkillInfo(skillId, level);
            
            // Assert
            Assert.NotNull(skillInfo);
            Assert.NotEmpty(skillInfo.SkillActions);
            
            foreach (var action in skillInfo.SkillActions)
            {
                // 每个动作都应该有解析后的触发帧效果
                Assert.NotNull(action.TriggerEffects);
                // 注意：有些动作可能没有触发帧，所以不一定 NotEmpty
            }
        }
        
        [Fact]
        public void SkillActionInfo_Inheritance_ShouldBeCorrect()
        {
            // Arrange
            int skillId = 2001;
            int level = 1;
            
            // Act
            var skillInfo = SkillConfigManager.Instance.GetSkillInfo(skillId, level);
            var skillAction = skillInfo?.SkillActions[0];
            
            // Assert
            Assert.NotNull(skillAction);
            Assert.IsAssignableFrom<Astrum.LogicCore.ActionSystem.ActionInfo>(skillAction);
            Assert.IsAssignableFrom<Astrum.LogicCore.ActionSystem.NormalActionInfo>(skillAction);
            Assert.IsType<SkillActionInfo>(skillAction);
            
            // 验证基类字段可以访问
            Assert.True(skillAction.Id > 0);
            Assert.NotEmpty(skillAction.Catalog);
            
            // 验证派生类字段可以访问
            Assert.True(skillAction.SkillId > 0);
            Assert.NotEmpty(skillAction.TriggerFrames);
        }
    }
}

