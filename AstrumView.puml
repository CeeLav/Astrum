@startuml AstrumView表现层架构

title Astrum项目 - 表现层(View Layer)架构

package "表现层核心" {
    class ViewManager {
        +CurrentStage: Stage
        +StageHistory: Stack<Stage>
        +IsUpdating: bool
        +DeltaTime: float
        
        +Initialize(): void
        +Update(deltaTime: float): void
        +SwitchStage(stage: Stage): void
        +GetCurrentStage(): Stage
        +Shutdown(): void
    }
    
    abstract class Stage {
        +StageId: string             ' Stage的唯一标识符
        +StageName: string           ' Stage名称
        +IsActive: bool              ' 是否激活状态
        +IsLoaded: bool              ' 是否已加载
        +EntityViews: Dictionary<long, EntityView>  ' 实体视图映射表
        +Camera: Camera              ' 舞台摄像机
        +Environment: Environment    ' 环境设置
        +RoomId: long                ' 对应LogicCore中的Room ID
        
        +Initialize(): void          ' 初始化Stage
        +Load(): void                ' 加载Stage资源
        +Unload(): void              ' 卸载Stage资源
        +Update(deltaTime: float): void  ' 更新Stage
        +Render(): void              ' 渲染Stage
        +OnEnter(): void             ' 进入Stage时调用
        +OnExit(): void              ' 退出Stage时调用
        +AddEntityView(entityView: EntityView): void      ' 添加实体视图
        +RemoveEntityView(entityId: long): void           ' 移除实体视图
        +GetEntityView(entityId: long): EntityView        ' 获取实体视图
        +SyncWithRoom(roomData: RoomData): void          ' 与逻辑层Room同步
    }
    
    class GameStage extends Stage {
        +TerrainRenderer: TerrainRenderer    ' 地形渲染器
        +WeatherSystem: WeatherSystem        ' 天气系统
        +LightingSystem: LightingSystem      ' 光照系统
        +ParticleSystem: ParticleSystem      ' 粒子系统
        +UIOverlay: UIOverlay                ' UI覆盖层
        
        +SetupGameEnvironment(): void        ' 设置游戏环境
        +UpdateGameVisuals(deltaTime: float): void  ' 更新游戏视觉效果
        +HandleCameraControl(): void         ' 处理摄像机控制
    }
    
    class MenuStage extends Stage {
        +BackgroundScene: GameObject         ' 背景场景
        +UICanvas: Canvas                    ' UI画布
        +MenuMusic: AudioSource              ' 菜单音乐
        
        +ShowMainMenu(): void                ' 显示主菜单
        +ShowSettingsMenu(): void            ' 显示设置菜单
        +PlayBackgroundAnimation(): void     ' 播放背景动画
    }
    
    class BattleStage extends Stage {
        +BattlefieldRenderer: BattlefieldRenderer  ' 战场渲染器
        +EffectsManager: EffectsManager      ' 特效管理器
        +HUDManager: HUDManager              ' HUD管理器
        +CombatCamera: CombatCamera          ' 战斗摄像机
        
        +SetupBattlefield(): void            ' 设置战场
        +UpdateCombatEffects(): void         ' 更新战斗特效
        +HandleBattleCamera(): void          ' 处理战斗摄像机
    }
}

package "实体视图系统" {
    abstract class EntityView {
        +EntityId: long              ' 对应逻辑层Entity的ID
        +GameObject: GameObject      ' Unity GameObject
        +Transform: Transform        ' 变换组件
        +IsVisible: bool             ' 是否可见
        +IsActive: bool              ' 是否激活
        +ViewComponents: List<ViewComponent>  ' 视图组件列表
        +LastSyncTime: DateTime      ' 最后同步时间
        
        +Initialize(entityId: long): void     ' 初始化视图
        +UpdateView(deltaTime: float): void   ' 更新视图
        +SyncWithEntity(entityData: EntityData): void  ' 与逻辑实体同步
        +SetVisible(visible: bool): void      ' 设置可见性
        +SetActive(active: bool): void        ' 设置激活状态
        +AddViewComponent(component: ViewComponent): void    ' 添加视图组件
        +RemoveViewComponent<T>(): void       ' 移除视图组件
        +GetViewComponent<T>(): T             ' 获取视图组件
        +Destroy(): void                      ' 销毁视图
    }
    
    class UnitView extends EntityView {
        +UnitType: string            ' 单位类型
        +ModelRenderer: Renderer     ' 模型渲染器
        +Animator: Animator          ' 动画控制器
        +HealthBarUI: HealthBar      ' 血条UI
        +SelectionIndicator: GameObject  ' 选择指示器
        
        +PlayAnimation(animName: string): void    ' 播放动画
        +UpdateHealthBar(health: float): void     ' 更新血条
        +ShowSelectionIndicator(): void           ' 显示选择指示器
        +HideSelectionIndicator(): void           ' 隐藏选择指示器
        +UpdateMovement(position: Vector3, rotation: Quaternion): void  ' 更新移动
    }
    
    class BuildingView extends EntityView {
        +BuildingType: string        ' 建筑类型
        +MeshRenderer: MeshRenderer  ' 网格渲染器
        +ConstructionEffect: ParticleSystem  ' 建造特效
        +DestructionEffect: ParticleSystem   ' 销毁特效
        
        +PlayConstructionAnimation(): void    ' 播放建造动画
        +PlayDestructionAnimation(): void     ' 播放销毁动画
        +UpdateBuildingState(state: BuildingState): void  ' 更新建筑状态
    }
    
    class ProjectileView extends EntityView {
        +ProjectileType: string      ' 弹射物类型
        +TrailRenderer: TrailRenderer    ' 拖尾渲染器
        +ImpactEffect: ParticleSystem    ' 撞击特效
        +Speed: float                ' 移动速度
        
        +UpdateTrajectory(startPos: Vector3, endPos: Vector3): void  ' 更新轨迹
        +PlayImpactEffect(): void         ' 播放撞击特效
    }
    
    class EnvironmentView extends EntityView {
        +EnvironmentType: string     ' 环境类型
        +StaticMeshRenderer: MeshRenderer  ' 静态网格渲染器
        +CollisionMesh: MeshCollider ' 碰撞网格
        
        +SetupEnvironmentCollision(): void   ' 设置环境碰撞
        +UpdateEnvironmentLOD(distance: float): void  ' 更新环境LOD
    }
}

package "视图组件系统" {
    abstract class ViewComponent {
        +ComponentId: int            ' 组件ID
        +OwnerEntityView: EntityView ' 所属实体视图
        +IsEnabled: bool             ' 是否启用
        
        +Initialize(): void          ' 初始化组件
        +Update(deltaTime: float): void  ' 更新组件
        +Destroy(): void             ' 销毁组件
    }
    
    class RenderComponent extends ViewComponent {
        +Renderer: Renderer          ' 渲染器
        +Materials: List<Material>   ' 材质列表
        +RenderQueue: int            ' 渲染队列
        +CastShadows: bool           ' 是否投射阴影
        +ReceiveShadows: bool        ' 是否接收阴影
        
        +SetMaterial(material: Material): void    ' 设置材质
        +UpdateRenderSettings(): void             ' 更新渲染设置
    }
    
    class AnimationComponent extends ViewComponent {
        +Animator: Animator          ' 动画控制器
        +CurrentAnimation: string    ' 当前动画
        +AnimationSpeed: float       ' 动画速度
        +IsLooping: bool             ' 是否循环
        
        +PlayAnimation(name: string, loop: bool): void    ' 播放动画
        +StopAnimation(): void                            ' 停止动画
        +SetAnimationSpeed(speed: float): void            ' 设置动画速度
    }
    
    class EffectComponent extends ViewComponent {
        +ParticleSystem: ParticleSystem  ' 粒子系统
        +EffectType: string          ' 特效类型
        +Duration: float             ' 持续时间
        +IsPlaying: bool             ' 是否正在播放
        
        +PlayEffect(): void              ' 播放特效
        +StopEffect(): void              ' 停止特效
        +SetEffectParameters(params: Dictionary<string, object>): void  ' 设置特效参数
    }
    
    class AudioComponent extends ViewComponent {
        +AudioSource: AudioSource    ' 音频源
        +AudioClip: AudioClip        ' 音频片段
        +Volume: float               ' 音量
        +Is3D: bool                  ' 是否3D音频
        
        +PlayAudio(clip: AudioClip): void     ' 播放音频
        +StopAudio(): void                    ' 停止音频
        +SetVolume(volume: float): void       ' 设置音量
    }
    
    class UIComponent extends ViewComponent {
        +UICanvas: Canvas            ' UI画布
        +UIElements: List<UIElement> ' UI元素列表
        +WorldSpaceUI: bool          ' 是否世界空间UI
        
        +ShowUI(): void                  ' 显示UI
        +HideUI(): void                  ' 隐藏UI
        +UpdateUIPosition(): void        ' 更新UI位置
    }
}

package "渲染系统" {
    class RenderManager {
        +MainCamera: Camera          ' 主摄像机
        +RenderPipeline: RenderPipeline  ' 渲染管线
        +LightingSettings: LightingSettings  ' 光照设置
        +PostProcessingStack: PostProcessingStack  ' 后处理堆栈
        
        +Render(): void                  ' 执行渲染
        +SetupCamera(camera: Camera): void   ' 设置摄像机
        +UpdateLighting(): void              ' 更新光照
        +ApplyPostProcessing(): void         ' 应用后处理
    }
    
    class CameraController {
        +TargetCamera: Camera        ' 目标摄像机
        +FollowTarget: Transform     ' 跟随目标
        +CameraMode: CameraMode      ' 摄像机模式
        +MovementSpeed: float        ' 移动速度
        +RotationSpeed: float        ' 旋转速度
        
        +SetFollowTarget(target: Transform): void    ' 设置跟随目标
        +SwitchCameraMode(mode: CameraMode): void    ' 切换摄像机模式
        +UpdateCameraPosition(): void                ' 更新摄像机位置
    }
    
    enum CameraMode {
        FREE_LOOK
        FOLLOW
        FIXED
        CINEMATIC
    }
}

package "同步系统" {
    class ViewSyncManager {
        +SyncInterval: float         ' 同步间隔
        +PendingSyncs: Queue<SyncData>   ' 待同步数据队列
        +LastSyncFrame: int          ' 最后同步帧
        
        +SyncStageWithRoom(stage: Stage, roomData: RoomData): void       ' 同步Stage与Room
        +SyncEntityViewWithEntity(view: EntityView, entityData: EntityData): void  ' 同步视图与实体
        +ProcessSyncQueue(): void        ' 处理同步队列
        +ScheduleSync(syncData: SyncData): void  ' 调度同步
    }
    
    class SyncData {
        +EntityId: long              ' 实体ID
        +Position: Vector3           ' 位置
        +Rotation: Quaternion        ' 旋转
        +Scale: Vector3              ' 缩放
        +ComponentData: Dictionary<string, object>  ' 组件数据
        +Timestamp: long             ' 时间戳
    }
}

' 系统关系
ViewManager ||--|| Stage : "管理"
Stage ||--o{ EntityView : "包含"
EntityView ||--o{ ViewComponent : "拥有"
ViewManager ..> RenderManager : "使用"
ViewManager ..> ViewSyncManager : "使用"
RenderManager ||--|| CameraController : "控制"

' 与逻辑层的映射关系
note top of Stage : "Stage 对应 LogicCore 中的 Room\n- 一对一映射关系\n- 负责Room的视觉表现\n- 管理Room中所有Entity的视图"

note top of EntityView : "EntityView 对应 LogicCore 中的 Entity\n- 一对一映射关系\n- 负责Entity的视觉表现\n- 通过EntityId建立关联"

note right of ViewSyncManager : "同步机制:\n1. 接收LogicCore的状态更新\n2. 将逻辑状态映射到视觉表现\n3. 插值和平滑处理\n4. 延迟补偿和预测"

' 主要流程说明
note top of ViewManager : "表现层主要流程:\n1. 接收逻辑层状态更新\n2. 同步Stage和EntityView\n3. 更新视觉效果和动画\n4. 执行渲染和UI更新\n5. 处理表现层特有逻辑"

@enduml
